name: deploy
on:
  push:
    tags:
      - v*
    branches:
      - main
  pull_request:
    branches:
      - main # 当pr被合并到main分支时
permissions:
  contents: read

jobs:
  test:
    name: Test
    strategy:
      matrix:
        go-version: [ 1.18.x ]
        os: [ ubuntu-latest ]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Set up Go
        uses: actions/setup-go@v1
        with:
          go-version: ${{ matrix.go-version }}
      - name: checkout code
        uses: actions/checkout@v2
      - name: unit test
        run: go test ./...
      - name: Login to ACR
        uses: aliyun/acr-login@v1
        with:
          login-server: https://registry.cn-hangzhou.aliyuncs.com
          username: "${{ secrets.ACR_USERNAME }}"
          password: "${{ secrets.ACR_PASSWORD }}"
      - name: Start build docker image
        run: echo ${{ github.ref_name }}
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: registry.cn-hangzhou.aliyuncs.com/91go/rss2:${{ github.ref_name }},registry.cn-hangzhou.aliyuncs.com/91go/rss2:latest
      - name: deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          password: ${{ secrets.SERVER_SSH_PWD }}
          port: 22
          timeout: 10m
          script_stop: true
          script: |
            cd ~/vps-deploy/www/rss2 && docker-compose pull && docker-compose up --build -d




#      - name: Set output variables
#        id: vars
#        run: |
#          # 拼接镜像 id，这个镜像 id 就是在使用 docker 镜像时 pull 后面的名字。
#          IMAGE_ID=libra146/$IMAGE_NAME
#          # 将所有的大写字母转为小写
#          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
#          # 从 GitHub.ref 中取出版本
#          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
#          # 从 tag 名字中替换 v 字符
#          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
#          # Use Docker `latest` tag convention
#          [ "$VERSION" == "master" ] && VERSION=latest
#          echo IMAGE_ID=$IMAGE_ID
#          echo VERSION=$VERSION
#
#          if [ ${{ github.ref }} = "refs/heads/master" ]; then
#            echo ::set-output name=TAG::${VERSION}-SNAPSHOT
#          elif [[ ${{ github.ref }} =~ ^refs/heads/v.*-branch$ ]]; then
#            echo ::set-output name=TAG::${VERSION}
#          else
#            echo ::set-output name=TAG::${VERSION}-${{ github.sha }}
#          fi
#
#          echo ::set-output name=BRANCH::${{ github.ref }}
#          echo ::set-output name=COMMIT::${{ github.sha }}

# 当镜像有更新时，会重新创建容器
# 只有在image有更新的情况下，直接`docker-dompose up`才会重新创建容器；但是我们通过dockerfile创建镜像，所以需要

#      - name: Build and push image
#        env:
#          IMAGE_TAG: latest
#        run: |
#          docker build -t registry.cn-hangzhou.aliyuncs.com/myrepo/demo:$IMAGE_TAG .
#          docker push registry.cn-hangzhou.aliyuncs.com/myrepo/demo:$IMAGE_TAG


#            cd ~/data/rss2 && git pull && docker-compose rm -sf rss2-service && docker rmi rss2_rss2 && docker-compose up -d rss2
#            cd ~/data/rss2 && git pull && docker-compose down && docker-compose up --build -d
#            cd ~/data/rss2 && git pull && docker-compose up -d --force-recreate rss2-service

#      - name: Upload Coverage report to CodeCov
#        uses: codecov/codecov-action@v1.0.0
#        with:
#          token: ${{secrets.CODECOV_TOKEN}}
#          file: ./coverage.txt



#  build:
#    name: Build
#    runs-on: ubuntu-latest
#    needs: [ lint, test ]
#    steps:
#      - name: Set up Go
#        uses: actions/setup-go@v1
#        with:
#          go-version: 1.17.x
#
#      - name: Check out code
#        uses: actions/checkout@v1
#
#      - name: Build
#        run: go build
