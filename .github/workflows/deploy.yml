name: test and deploy
on:
  push:
    tags:
      - v*
    branches:
      - master
      - main
  pull_request:
permissions:
  contents: read

jobs:
  test:
    name: Test
    strategy:
      matrix:
        go-version: [1.17.x]
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Set up Go
        uses: actions/setup-go@v1
        with:
          go-version: ${{ matrix.go-version }}
      - name: checkout code
        uses: actions/checkout@v2
      - name: unit test
        run: go test ./...
      - name: Login to ACR
        uses: aliyun/acr-login@v1
        with:
          login-server: https://registry.cn-hangzhou.aliyuncs.com
          username: "${{ secrets.ACR_USERNAME }}"
          password: "${{ secrets.ACR_PASSWORD }}"
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: registry.cn-hangzhou.aliyuncs.com/91go/rss2:latest
      - name: deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          password: ${{ secrets.SERVER_SSH_PWD }}
          port: 22
          timeout: 10m
          script_stop: true
          script: |
            cd ~/data/rss2 && docker-compose up --build -d



# 当镜像有更新时，会重新创建容器
# 只有在image有更新的情况下，直接`docker-dompose up`才会重新创建容器；但是我们通过dockerfile创建镜像，所以需要

#      - name: Build and push image
#        env:
#          IMAGE_TAG: latest
#        run: |
#          docker build -t registry.cn-hangzhou.aliyuncs.com/myrepo/demo:$IMAGE_TAG .
#          docker push registry.cn-hangzhou.aliyuncs.com/myrepo/demo:$IMAGE_TAG


#            cd ~/data/rss2 && git pull && docker-compose rm -sf rss2-service && docker rmi rss2_rss2 && docker-compose up -d rss2
#            cd ~/data/rss2 && git pull && docker-compose down && docker-compose up --build -d
#            cd ~/data/rss2 && git pull && docker-compose up -d --force-recreate rss2-service

#      - name: Upload Coverage report to CodeCov
#        uses: codecov/codecov-action@v1.0.0
#        with:
#          token: ${{secrets.CODECOV_TOKEN}}
#          file: ./coverage.txt



#  build:
#    name: Build
#    runs-on: ubuntu-latest
#    needs: [ lint, test ]
#    steps:
#      - name: Set up Go
#        uses: actions/setup-go@v1
#        with:
#          go-version: 1.17.x
#
#      - name: Check out code
#        uses: actions/checkout@v1
#
#      - name: Build
#        run: go build