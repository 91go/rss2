# 公司提供的基础docker镜像
image: registry/group/go:1.12.9-4

# 缓存策略调整为只pull而不push，减少pipeline运行时间，否则cache很大时pipeline会执行很久
cache: &global_cache
  paths:
    - mod
  policy: pull

variables:
  # cache仅支持项目目录下的文件夹，因此需要在before_script拷贝mod文件夹到MOD_CACHE，在after_script中拷回来
  MOD_CACHE: "/home/work/go/pkg/mod"
  # 仅clone最新的源码版本（省去历史commit），减少clone时间
  GIT_DEPTH: "1"

before_script:
  # go get需要这个配置以支持从privat git仓库拉代码
  - git config --global url."git@git.company.net:".insteadOf "https://git.company.net/"
  # 添加ssh秘钥信息
  - eval $(ssh-agent -s) && echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
  - mkdir -p mod $MOD_CACHE && rm -rf $MOD_CACHE && mv mod $MOD_CACHE
  # 提前下载依赖，否则lint阶段可能因go mod兼容问题导致下载依赖失败
  - export GO111MODULE=on && go mod tidy -v && go mod download

# 定义流水线阶段
stages:
  - qa
  - build

# 执行代码静态检查
lint:
  stage: qa
  script:
    - golangci-lint run

# 执行UT
ut:
  stage: qa
  script:
    - go test -race -coverprofile cover.out -coverpkg=./... ./...
    - total=$(go tool cover -func=cover.out | tail -1)
    - echo ${total}
    - coverage=$(echo ${total} | grep -P '\d+\.\d+(?=\%)' -o)
    # 如果测试覆盖率低于30，认为ut执行失败
    - (( $(awk 'BEGIN {print ("'${coverage}'" >= "'30'")}') )) || (echo "单测覆盖率低于10%"; exit 1)

coverage:
  stage: qa
  script:
    - go test -race -coverprofile cover.out -coverpkg=./... ./... > /dev/null
    - coverage=$(go tool cover -func=cover.out | tail -1  | grep -P '\d+\.\d+(?=\%)' -o)
    # 这是我自己搭建http服务的地址，它在redis中记录了各个模块master分支的测试覆盖率
    # 如果当前分支的测试覆盖率低于master，也就是说当前分支的新代码没写单测，它会返回500，使该阶段失败
    - url="http://test.coverage.com:5000/coverage?module=${CI_PROJECT_NAME}&branch=${CI_COMMIT_REF_NAME}&coverage=${coverage}"
    - curl --silent --write-out " code:%{http_code}\n" ${url} | tee response.txt
    - http_status=$(tail -1 response.txt | grep -o -P "\d+$") && [[ "${http_status}" == "200" ]] && exit 0 || exit 1
  # 该阶段失败后会报warn，而不是error
  allow_failure: true

build:
  stage: build
  # build，制品上传到公司的发布仓
  ...
  # 仅当 打tag 且格式类似 prod-20190101-1 -> 会执行build
  only:
    - /^prod-\d+-\d+$/
  except:
    - branches
  extends: .template
  cache:
    # 继承全局cache设置
    <<: *global_cache
    # 在build阶段执行push更新cache
    policy: pull-push